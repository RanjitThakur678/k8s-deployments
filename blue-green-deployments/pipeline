pipeline {
    agent any
    environment {
        KUBE_CONFIG = credentials('kubeconfig-aks')  // Reference to kubeconfig credentials
    }
    parameters {
        choice(name: 'DEPLOYMENT_ENV', choices: ['blue', 'green'], description: 'Specify deployment environment')
    }
    stages {
        stage('Build and Push Image') {
            steps {
                script {
                    // Build Docker image
                    dockerImage = docker.build("myregistry.azurecr.io/my-app:${env.BUILD_ID}")
                    docker.withRegistry('https://myregistry.azurecr.io', 'acr-credentials') {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                withKubeConfig(credentialsId: 'kubeconfig-aks') {
                    script {
                        // Determine deployment files based on selected environment
                        def env = params.DEPLOYMENT_ENV.toLowerCase()
                        if (env == 'blue') {
                            sh 'kubectl apply -f k8s/blue/deployment-blue.yaml'
                            sh 'kubectl apply -f k8s/blue/service-blue.yaml'
                        } else if (env == 'green') {
                            sh 'kubectl apply -f k8s/green/deployment-green.yaml'
                            sh 'kubectl apply -f k8s/green/service-green.yaml'
                        }
                    }
                }
            }
        }
        // stage('Run Tests') { stage to test the release after deployment before routing traffic 
        //     steps {
        //         withKubeConfig(credentialsId: 'kubeconfig-aks') {
        //             script {
        //                 def env = params.DEPLOYMENT_ENV.toLowerCase()
        //                 
        //                 sh "kubectl -n ${env} exec -it <test-pod-name>"
        //             }
        //         }
        //     }
        // }
        stage('Switch Traffic') {
            steps {
                script {
                    // Command to switch traffic based on the selected environment
                    def env = params.DEPLOYMENT_ENV.toLowerCase()
                    sh "az network traffic-manager endpoint update --name myEndpoint --traffic-routing-method priority --target-resource-id <${env}-endpoint>"
                }
            }
        }
        stage('Cleanup') {
            steps {
                withKubeConfig(credentialsId: 'kubeconfig-aks') {
                    script {
                        def otherEnv = (params.DEPLOYMENT_ENV == 'blue') ? 'green' : 'blue'
                        sh "kubectl -n ${otherEnv} delete deployment my-app"
                    }
                }
            }
        }
    }
}
